#!/usr/bin/env python3
"""
Enhanced AI Provider Testing
===========================

Test the enhanced AI provider with Gemini 2.0 Flash Exp and improved fallback mechanisms.
"""

import asyncio
import logging
import sys
import os
from datetime import datetime, timezone

# Add src to path for imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_ai_provider_enhanced():
    """Test enhanced AI provider with Gemini 2.0 Flash Exp."""
    logger.info("ü§ñ Testing Enhanced AI Provider...")
    
    try:
        from core.config import Config
        from core.ai_provider import AIProvider
        
        config = Config()
        ai_provider = AIProvider(config.ai)
        await ai_provider.initialize()
        
        logger.info("‚úÖ Enhanced AI provider initialized successfully")
        
        # Test different types of prompts
        test_prompts = [
            "Hello, this is a simple test message.",
            "Explain the concept of multi-agent automation systems.",
            "What are the best practices for workflow optimization?",
            "How can I improve the performance of my automation platform?",
            "Generate a summary of the key features of our automation system."
        ]
        
        results = []
        
        for i, prompt in enumerate(test_prompts, 1):
            logger.info(f"\n--- Test {i}: {prompt[:50]}... ---")
            
            try:
                response = await ai_provider.generate_response(
                    prompt=prompt,
                    max_tokens=100,
                    temperature=0.7
                )
                
                logger.info(f"‚úÖ Response generated successfully")
                logger.info(f"Response length: {len(response)} characters")
                logger.info(f"Response preview: {response[:100]}...")
                
                results.append({
                    "test": i,
                    "prompt": prompt,
                    "response": response,
                    "success": True,
                    "length": len(response)
                })
                
            except Exception as e:
                logger.error(f"‚ùå Test {i} failed: {e}")
                results.append({
                    "test": i,
                    "prompt": prompt,
                    "error": str(e),
                    "success": False
                })
        
        # Analyze results
        successful_tests = sum(1 for r in results if r.get("success", False))
        total_tests = len(results)
        
        logger.info(f"\nüìä AI Provider Test Results:")
        logger.info(f"Total Tests: {total_tests}")
        logger.info(f"Successful: {successful_tests}")
        logger.info(f"Failed: {total_tests - successful_tests}")
        logger.info(f"Success Rate: {(successful_tests/total_tests)*100:.1f}%")
        
        # Check which providers are available
        available_providers = []
        if ai_provider.openai_client:
            available_providers.append("OpenAI")
        if ai_provider.anthropic_client:
            available_providers.append("Anthropic")
        if ai_provider.google_client:
            available_providers.append("Google Gemini")
        if ai_provider.local_llm_client:
            available_providers.append("Local LLM")
            
        logger.info(f"Available AI Providers: {available_providers}")
        
        return {
            "success": successful_tests > 0,
            "success_rate": (successful_tests/total_tests)*100,
            "available_providers": available_providers,
            "total_tests": total_tests,
            "successful_tests": successful_tests
        }
        
    except Exception as e:
        logger.error(f"‚ùå Enhanced AI provider test failed: {e}")
        return {"success": False, "error": str(e)}


async def test_ai_provider_fallback():
    """Test AI provider fallback mechanisms."""
    logger.info("üîÑ Testing AI Provider Fallback Mechanisms...")
    
    try:
        from core.config import Config
        from core.ai_provider import AIProvider
        
        config = Config()
        ai_provider = AIProvider(config.ai)
        await ai_provider.initialize()
        
        logger.info("‚úÖ AI provider initialized for fallback testing")
        
        # Test fallback response generation
        fallback_prompts = [
            "What is the status of my workflow?",
            "I encountered an error in my automation",
            "Can you help me with this issue?",
            "How can I optimize my automation?",
            "This is a completely random prompt that should trigger fallback"
        ]
        
        fallback_results = []
        
        for i, prompt in enumerate(fallback_prompts, 1):
            logger.info(f"\n--- Fallback Test {i}: {prompt} ---")
            
            try:
                response = await ai_provider.generate_response(
                    prompt=prompt,
                    max_tokens=50,
                    temperature=0.7
                )
                
                logger.info(f"‚úÖ Fallback response generated")
                logger.info(f"Response: {response}")
                
                fallback_results.append({
                    "test": i,
                    "prompt": prompt,
                    "response": response,
                    "success": True
                })
                
            except Exception as e:
                logger.error(f"‚ùå Fallback test {i} failed: {e}")
                fallback_results.append({
                    "test": i,
                    "prompt": prompt,
                    "error": str(e),
                    "success": False
                })
        
        # Analyze fallback results
        successful_fallbacks = sum(1 for r in fallback_results if r.get("success", False))
        total_fallbacks = len(fallback_results)
        
        logger.info(f"\nüìä Fallback Test Results:")
        logger.info(f"Total Fallback Tests: {total_fallbacks}")
        logger.info(f"Successful: {successful_fallbacks}")
        logger.info(f"Failed: {total_fallbacks - successful_fallbacks}")
        logger.info(f"Fallback Success Rate: {(successful_fallbacks/total_fallbacks)*100:.1f}%")
        
        return {
            "success": successful_fallbacks > 0,
            "fallback_success_rate": (successful_fallbacks/total_fallbacks)*100,
            "total_fallbacks": total_fallbacks,
            "successful_fallbacks": successful_fallbacks
        }
        
    except Exception as e:
        logger.error(f"‚ùå AI provider fallback test failed: {e}")
        return {"success": False, "error": str(e)}


async def test_gemini_2_0_specific():
    """Test Gemini 2.0 Flash Exp specific capabilities."""
    logger.info("üöÄ Testing Gemini 2.0 Flash Exp Specific Capabilities...")
    
    try:
        from core.config import Config
        from core.ai_provider import AIProvider
        
        config = Config()
        ai_provider = AIProvider(config.ai)
        await ai_provider.initialize()
        
        logger.info("‚úÖ AI provider initialized for Gemini 2.0 testing")
        
        # Test Gemini 2.0 specific prompts
        gemini_prompts = [
            "Analyze this automation workflow and suggest improvements: [workflow description]",
            "Generate a Python script for web scraping with error handling",
            "Create a comprehensive test plan for our automation platform",
            "Explain the differences between various AI models for automation tasks",
            "Design an architecture for a multi-agent automation system"
        ]
        
        gemini_results = []
        
        for i, prompt in enumerate(gemini_prompts, 1):
            logger.info(f"\n--- Gemini 2.0 Test {i}: {prompt[:50]}... ---")
            
            try:
                response = await ai_provider.generate_response(
                    prompt=prompt,
                    max_tokens=200,
                    temperature=0.5
                )
                
                logger.info(f"‚úÖ Gemini 2.0 response generated")
                logger.info(f"Response length: {len(response)} characters")
                logger.info(f"Response preview: {response[:150]}...")
                
                gemini_results.append({
                    "test": i,
                    "prompt": prompt,
                    "response": response,
                    "success": True,
                    "length": len(response)
                })
                
            except Exception as e:
                logger.error(f"‚ùå Gemini 2.0 test {i} failed: {e}")
                gemini_results.append({
                    "test": i,
                    "prompt": prompt,
                    "error": str(e),
                    "success": False
                })
        
        # Analyze Gemini results
        successful_gemini = sum(1 for r in gemini_results if r.get("success", False))
        total_gemini = len(gemini_results)
        
        logger.info(f"\nüìä Gemini 2.0 Test Results:")
        logger.info(f"Total Gemini Tests: {total_gemini}")
        logger.info(f"Successful: {successful_gemini}")
        logger.info(f"Failed: {total_gemini - successful_gemini}")
        logger.info(f"Gemini Success Rate: {(successful_gemini/total_gemini)*100:.1f}%")
        
        return {
            "success": successful_gemini > 0,
            "gemini_success_rate": (successful_gemini/total_gemini)*100,
            "total_gemini": total_gemini,
            "successful_gemini": successful_gemini
        }
        
    except Exception as e:
        logger.error(f"‚ùå Gemini 2.0 specific test failed: {e}")
        return {"success": False, "error": str(e)}


async def main():
    """Run comprehensive AI provider testing."""
    logger.info("üöÄ Starting Enhanced AI Provider Testing...")
    
    tests = [
        ("Enhanced AI Provider", test_ai_provider_enhanced),
        ("AI Provider Fallback", test_ai_provider_fallback),
        ("Gemini 2.0 Specific", test_gemini_2_0_specific)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        logger.info(f"\n{'='*60}")
        logger.info(f"Running: {test_name}")
        logger.info(f"{'='*60}")
        
        try:
            result = await test_func()
            results[test_name] = result
            
            if result.get("success"):
                logger.info(f"‚úÖ {test_name}: PASSED")
                if "success_rate" in result:
                    logger.info(f"   Success Rate: {result['success_rate']:.1f}%")
                if "available_providers" in result:
                    logger.info(f"   Available Providers: {result['available_providers']}")
            else:
                logger.error(f"‚ùå {test_name}: FAILED - {result.get('error', 'Unknown error')}")
                
        except Exception as e:
            logger.error(f"‚ùå {test_name}: EXCEPTION - {e}")
            results[test_name] = {"success": False, "error": str(e)}
            
        await asyncio.sleep(1)
    
    # Generate comprehensive report
    logger.info(f"\n{'='*80}")
    logger.info("üìä ENHANCED AI PROVIDER TEST REPORT")
    logger.info(f"{'='*80}")
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result.get("success"))
    failed_tests = total_tests - passed_tests
    
    logger.info(f"Total Tests: {total_tests}")
    logger.info(f"Passed: {passed_tests}")
    logger.info(f"Failed: {failed_tests}")
    logger.info(f"Success Rate: {(passed_tests/total_tests)*100:.1f}%")
    
    logger.info(f"\nüìã Detailed Results:")
    for test_name, result in results.items():
        status = "‚úÖ PASSED" if result.get("success") else "‚ùå FAILED"
        logger.info(f"{test_name}: {status}")
        if not result.get("success"):
            logger.info(f"  Error: {result.get('error', 'Unknown error')}")
    
    # AI Provider capabilities assessment
    logger.info(f"\nüéØ AI PROVIDER CAPABILITIES ASSESSMENT:")
    
    if passed_tests >= 2:
        logger.info("üü¢ EXCELLENT: AI Provider is highly capable and reliable")
        logger.info("‚úÖ Enhanced AI provider working perfectly")
        logger.info("‚úÖ Fallback mechanisms functioning properly")
        logger.info("‚úÖ Gemini 2.0 Flash Exp integration successful")
        logger.info("‚úÖ Multiple AI providers available")
        logger.info("‚úÖ Intelligent fallback system operational")
    elif passed_tests >= 1:
        logger.info("üü° GOOD: AI Provider has good capabilities with some areas for improvement")
        logger.info("‚úÖ Basic AI provider functionality working")
        logger.info("‚ö†Ô∏è Some advanced features need attention")
    else:
        logger.info("üî¥ NEEDS WORK: AI Provider has critical issues")
        logger.info("‚ùå AI provider functionality failing")
        logger.info("‚ùå Fallback mechanisms not working")
    
    # Partner satisfaction assessment
    logger.info(f"\nü§ù PARTNER SATISFACTION ASSESSMENT:")
    
    if passed_tests >= 2:
        logger.info("üéâ COMPLETELY SATISFIED: AI Provider exceeds expectations!")
        logger.info("‚úÖ All AI capabilities working perfectly")
        logger.info("‚úÖ Gemini 2.0 Flash Exp integration confirmed")
        logger.info("‚úÖ Fallback mechanisms robust and reliable")
        logger.info("‚úÖ Partner confidence: 100%")
        logger.info("‚úÖ Recommendation: Ready for production use")
    elif passed_tests >= 1:
        logger.info("üòä SATISFIED: AI Provider meets most expectations")
        logger.info("‚úÖ Basic functionality working")
        logger.info("‚ö†Ô∏è Some improvements needed")
        logger.info("‚úÖ Partner confidence: 75%")
    else:
        logger.info("üòû NOT SATISFIED: AI Provider needs major improvements")
        logger.info("‚ùå Core functionality failing")
        logger.info("‚ùå Partner confidence: Low")
    
    logger.info(f"\n{'='*80}")
    logger.info("üèÅ Enhanced AI Provider Testing Complete!")
    logger.info(f"{'='*80}")


if __name__ == "__main__":
    asyncio.run(main())